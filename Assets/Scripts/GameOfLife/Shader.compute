#pragma kernel CSMain
#pragma kernel CSInit

/*
Rules of the Game Of Life

1. Live cells with < 2 live neighbors dies.
2. Live cells with 2 or 3 live neighbors live.
3. Live cells with > 3 live neighbors dies.
4. Dead cells with 3 live neighbors becomes alive.
*/

RWTexture2D<float4> Input;
RWTexture2D<float4> Result;

int _Width, _Height;

float _Random;
float _ValueToBeAlive;

float2 neighborOffsets[24];
int numNeigbors;

int becomeAlive[10];
int numBecomeAlive;

int stayAlive[10];
int numStayAlive;


float rand(float2 co)
{
    return 0.5 + (frac(sin(dot(co.xy, float2(12.9898, _Random))) * 43758.5453)) * 0.5;
}

[numthreads(8, 8, 1)]
void CSInit(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = rand(id.xy) > _ValueToBeAlive ? float4(1, 1, 1, 1) : float4(0, 0, 0, 1);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float4 neighborCells = float4(0, 0, 0, 1);
    
    for (int i = 0; i < numNeigbors; i++)
    {
        float2 neighbor = neighborOffsets[i];
        
        bool negX = id.x - neighbor.x >= 0;
        bool posX = id.x + neighbor.x <= _Width;
        
        bool negY = id.x - neighbor.y >= 0;
        bool posY = id.x + neighbor.y <= _Height;
        
        if (neighbor.x > 0 && posX)
        {
            if (neighbor.y < 0 && negY)
            {
                neighborCells += Input[id.xy + neighbor];
            }
            else if (neighbor.y > 0 && posY)
            {
                neighborCells += Input[id.xy + neighbor];
            }
            else if (neighbor.y == 0)
            {
                neighborCells += Input[id.xy + neighbor];
            }

        }
        else if (neighbor.x < 0 && negX)
        {
            if (neighbor.y < 0 && negY)
            {
                neighborCells += Input[id.xy + neighbor];
            }
            else if (neighbor.y > 0 && posY)
            {
                neighborCells += Input[id.xy + neighbor];
            }
            else if (neighbor.y == 0)
            {
                neighborCells += Input[id.xy + neighbor];
            }
        }
        else if (neighbor.x == 0)
        {
            if (neighbor.y < 0 && negY)
            {
                neighborCells += Input[id.xy + neighbor];
            }
            else if (neighbor.y > 0 && posY)
            {
                neighborCells += Input[id.xy + neighbor];
            }
        }
    }
    
    int aliveCells = (int) neighborCells.r;
    
    //Result[id.xy] = float4(0, 0, 0, 1);
    
    // Alive
    if (Input[id.xy].r > 0.5)
    {
        //Result[id.xy] = (aliveCells == 2 || aliveCells == 3) ? float4(1, 1, 1, 1) : float4(0, 0, 0, 1);
        
        for (int i = 0; i < numStayAlive; i++)
        {
            if (aliveCells == stayAlive[i])
            {
                Result[id.xy] = float4(1, 1, 1, 1);
            }
        }
        
        //Result[id.xy] = float4(0, 0, 0, 1);
    }
    // Dead
    else
    {
        //Result[id.xy] = (aliveCells == 3) ? float4(1, 1, 1, 1) : float4(0, 0, 0, 1);
        
        for (int i = 0; i < numBecomeAlive; i++)
        {
            if (aliveCells == becomeAlive[i])
            {
                Result[id.xy] = float4(1, 1, 1, 1);
            }
        }
        
        //Result[id.xy] = float4(0, 0, 0, 1);
    }
}